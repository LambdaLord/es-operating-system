#summary How to build ES web browser for Linux

= Building ES web browser for Linux =

*Note*: ES web browser has been tested only on [http://fedoraproject.org/ Fedora] 14, 15 and [http://www.ubuntu.com/ Ubuntu] 11.04 at this point.

*Note for Fedora users*: Please execute the following command to install the prerequisites to build ES web browser:
{{{
$ sudo yum install subversion autoconf automake texinfo bison flex js-devel re2c libicu-devel freetype-devel \
freeglut-devel libpng-devel boost-devel boost-iostreams boost-system boost-regex
}}}
For the !JavaScript engine, we're using [https://developer.mozilla.org/en/SpiderMonkey SpiderMonkey] instead of our own classic esjs.
Since we need !SpiderMonkey 1.8.5, we recommend you to use Fedora 15 as of writing this today. Fedora 14 comes with an older version of js-devel, which is not compatible with ES web browser. 
If you build !SpiderMonkey yourself, it's fine too.

*Note for Ubuntu users*: Please execute the following command to install the prerequisites to build ES web browser:
{{{
$ sudo apt-get install subversion autoconf automake texinfo bison flex libmozjs-dev re2c libicu-dev libfreetype6-dev \
freeglut3-dev libpng-dev libboost-dev libboost-iostreams-dev libboost-system-dev libboost-regex-dev
}}}

----

Before start building, please make sure you have built and installed the latest esidl Web IDL compiler
following the [QuickSetup instruction] from the subversion repository.

To build ES web browser, check out the source code, and set up the configure script by doing the following steps:

{{{
$ svn checkout http://es-operating-system.googlecode.com/svn/trunk/www
$ cd www
$ aclocal
$ autoconf
$ autoheader
$ automake -a -c --foreign
}}}

Then build the web browser:

{{{
$ configure CXXFLAGS=-g CFLAGS=-g
$ make
}}}

The browser core executable is currently built as `Script.test`. 
For testing, we recommend you to run a HTTP server locally on your PC with `www/testdata` directory at the root.
Running the following command in `www/testdata` would be sufficient:

{{{
$ python -m SimpleHTTPServer
}}}

Then execute `Script.test` as below:

{{{
./ScriptTest [path to 'testdata']/default.css http://localhost:8000/browser.html
}}}

`Script.test` takes two command line arguments: 
the 1st one is the default CSS style sheet, 
and the 2nd one is the initial URL to open.
As we are going to build the browser UI in HTML, 
the 2nd argument in the above command line points to a tiny browser web application.
If a new window successfully comes up, 
type `http://localhost:8000/1.html` in the top most text box and hit the Enter key
(note currently a caret is not shown, but backspace, delete, home, end, left, and right arrow keys are functioning). 
If everything is fine, you'll see the screens like below:

http://es-operating-system.googlecode.com/svn/html/Browser/screenshot1.png

Please take a look into [http://code.google.com/p/es-operating-system/source/browse/trunk/www/testdata www/testdata]
to see what else you can test now.

http://es-operating-system.googlecode.com/svn/html/Browser/screenshot2.png

Since the current version only implements a few very critical paths for a web browser, 
please do not expect you can visits and see many other sites.

Here's a quick introduction about  
[http://code.google.com/p/es-operating-system/source/browse/trunk/www the current browser source tree]:

  * www - A DOM core and events implementation.
    ** css - A CSS parser and renderer implementation using OpenGL as a graphics back-end.
    ** font - A tiny font manager that converts !TrueType fonts to OpenGL textures.
    ** html - An implementation of the HTML5 parser and HTML interfaces and elements. 
    ** http - HTTP 1.1 client built on top of [http://www.boost.org/doc/libs/1_46_1/doc/html/boost_asio.html boost asio library]. 
    ** idl - Web IDL definitions customized for the current esidl.
    ** js - JSAPI bridge for using !SpiderMonkey.
    ** testdata - test data files.
    ** url - URL parser